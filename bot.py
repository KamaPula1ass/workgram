# bot.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
START, CHOOSE_METHOD, HELP_TITLE, HELP_DESCRIPTION, HELP_REQUIREMENTS, HELP_SALARY, HELP_CONTACTS, HELP_CONFIRM, READY_VACANCY, CONFIRM_PAYMENT, WAITING_FOR_PAYMENT = range(11)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    logger.error("–¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")
    exit(1)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_ID = "752266705"

# –ò–º—è –≤–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
CHANNEL_ID = "@workwave_kzn"

# –¶–µ–Ω—ã –∫–∞–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
PUBLICATION_COST = 150
VIP_COST = 300

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start"""
    welcome_text = (
        "üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn\n\n"
        "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        f"üìå –û–±—ã—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {PUBLICATION_COST} ‚ÇΩ\n"
        f"‚≠ê VIP –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {VIP_COST} ‚ÇΩ\n\n"
        "VIP –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="add_vacancy")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return START

# –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
async def add_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ - –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    welcome_text = (
        "üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –ü–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="help_create")],
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="ready_vacancy")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return CHOOSE_METHOD

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
async def choose_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "help_create":
        user_data['method'] = "help"
        await query.edit_message_text(
            "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –≤–∞–∫–∞–Ω—Å–∏—é –≤–º–µ—Å—Ç–µ!\n\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:"
        )
        return HELP_TITLE
    
    elif query.data == "ready_vacancy":
        user_data['method'] = "ready"
        await query.edit_message_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "üíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n\n"
            "üè¢ –ö–æ–º–ø–∞–Ω–∏—è: –û–û–û '–†–æ–º–∞—à–∫–∞'\n"
            "üìç –õ–æ–∫–∞—Ü–∏—è: –ö–∞–∑–∞–Ω—å, –æ—Ñ–∏—Å\n"
            "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: 50 000 - 80 000 ‚ÇΩ\n"
            "üìã –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –ø—Ä–æ–¥–∞–∂–∞ —É—Å–ª—É–≥, —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
            "üéì –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "üìÖ –ì—Ä–∞—Ñ–∏–∫: –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç: @hr_romashka"
        )
        return READY_VACANCY

# === –ü–û–ú–û–©–¨ –í –°–û–°–¢–ê–í–õ–ï–ù–ò–ò ===

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
async def help_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    user_data['title'] = update.message.text
    await update.message.reply_text(
        "2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –º–æ–ª–æ–¥–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂."
    )
    return HELP_DESCRIPTION

# –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
async def help_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_data['description'] = update.message.text
    await update.message.reply_text(
        "3Ô∏è‚É£ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –æ–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –æ—Ç 1 –≥–æ–¥–∞, –∑–Ω–∞–Ω–∏–µ CRM, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤."
    )
    return HELP_REQUIREMENTS

# –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
async def help_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    user_data['requirements'] = update.message.text
    await update.message.reply_text(
        "4Ô∏è‚É£ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä: 50 000 - 80 000 ‚ÇΩ + –±–æ–Ω—É—Å—ã, –≥—Ä–∞—Ñ–∏–∫ 5/2, –æ—Ñ–∏—Å –≤ —Ü–µ–Ω—Ç—Ä–µ, –î–ú–° —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞."
    )
    return HELP_SALARY

# –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
async def help_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    user_data['salary'] = update.message.text
    await update.message.reply_text(
        "5Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä: @hr_manager, +7(999)123-45-67, hr@company.ru"
    )
    return HELP_CONTACTS

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
async def help_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_data['contacts'] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–∏
    preview = (
        f"üíº {user_data['title']}\n\n"
        f"üè¢ {user_data['description']}\n\n"
        f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {user_data['requirements']}\n\n"
        f"üí∞ {user_data['salary']}\n\n"
        f"üì© {user_data['contacts']}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_vacancy")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å", callback_data="restart_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n" + preview,
        reply_markup=reply_markup
    )
    return HELP_CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
async def help_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_vacancy":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        user_data['final_text'] = (
            f"üíº {user_data['title']}\n\n"
            f"üè¢ {user_data['description']}\n\n"
            f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {user_data['requirements']}\n\n"
            f"üí∞ {user_data['salary']}\n\n"
            f"üì© {user_data['contacts']}"
        )
        
        await show_payment_options(query, context)
        return CONFIRM_PAYMENT
    
    elif query.data == "restart_help":
        await query.edit_message_text(
            "üìù –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!\n\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:"
        )
        return HELP_TITLE

# === –ì–û–¢–û–í–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø ===

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
async def ready_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user_data['final_text'] = update.message.text
    
    await show_payment_options(update, context, is_callback=False)
    return CONFIRM_PAYMENT

# === –û–ü–õ–ê–¢–ê ===

async def show_payment_options(update_or_query, context, is_callback=True):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –æ–ø–ª–∞—Ç—ã"""
    payment_text = (
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        f"üìå –û–±—ã—á–Ω–∞—è: {PUBLICATION_COST} ‚ÇΩ\n"
        f"‚≠ê VIP: {VIP_COST} ‚ÇΩ\n\n"
        "VIP –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤!"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"üìå –û–±—ã—á–Ω–∞—è ({PUBLICATION_COST} ‚ÇΩ)", callback_data="regular")],
        [InlineKeyboardButton(f"‚≠ê VIP ({VIP_COST} ‚ÇΩ)", callback_data="vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if is_callback:
        await update_or_query.edit_message_text(payment_text, reply_markup=reply_markup)
    else:
        await update_or_query.message.reply_text(payment_text, reply_markup=reply_markup)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def select_publication_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_data['publication_type'] = query.data
    cost = VIP_COST if query.data == "vip" else PUBLICATION_COST
    
    payment_text = (
        f"üí∞ –û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({cost} ‚ÇΩ)\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n"
        "üîπ –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É: `+79083420585`\n"
        "üîπ Tinkoff: `5536914122039807`\n\n"
        "‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: `–í–∞–∫–∞–Ω—Å–∏—è`\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\""
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(payment_text, reply_markup=reply_markup)
    return WAITING_FOR_PAYMENT

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    pub_type = "VIP" if user_data.get('publication_type') == "vip" else "–û–±—ã—á–Ω–∞—è"
    cost = VIP_COST if user_data.get('publication_type') == "vip" else PUBLICATION_COST

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    moderation_text = (
        f"üìù –ù–û–í–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø (–û–ü–õ–ê–ß–ï–ù–û)\n"
        f"–¢–∏–ø: {pub_type} ({cost} ‚ÇΩ)\n\n"
        f"üîπ –í–∞–∫–∞–Ω—Å–∏—è:\n{user_data['final_text']}\n\n"
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?"
    )

    keyboard = [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=ADMIN_ID, 
        text=moderation_text, 
        reply_markup=reply_markup
    )

    await query.edit_message_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        "–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn"
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø–ª–∞—Ç–µ
async def back_to_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    await show_payment_options(query, context)
    return CONFIRM_PAYMENT

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–¥–º–∏–Ω–æ–º
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        message = await context.bot.send_message(
            chat_id=CHANNEL_ID, 
            text=user_data['final_text']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é"
        keyboard = [[InlineKeyboardButton(
            "üíº –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é", 
            url=f"https://t.me/workgramm_bot?start=publish"
        )]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.edit_message_reply_markup(
            chat_id=CHANNEL_ID,
            message_id=message.message_id,
            reply_markup=reply_markup
        )
        
        # –ï—Å–ª–∏ VIP - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        if user_data.get('publication_type') == "vip":
            await query.edit_message_text(
                "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn!\n"
                "üì© VIP —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤!"
            )
        else:
            await query.edit_message_text("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn!")
        
        logger.info("–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"
        await query.edit_message_text(error_msg)
        logger.error(error_msg)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    await start(query, context)
    return START

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            START: [
                CallbackQueryHandler(add_vacancy, pattern="add_vacancy"),
                CallbackQueryHandler(restart, pattern="restart")
            ],
            CHOOSE_METHOD: [CallbackQueryHandler(choose_method, pattern="^(help_create|ready_vacancy)$")],
            
            # –ü–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
            HELP_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_title)],
            HELP_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_description)],
            HELP_REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_requirements)],
            HELP_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_salary)],
            HELP_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_contacts)],
            HELP_CONFIRM: [CallbackQueryHandler(help_confirm, pattern="^(confirm_vacancy|restart_help)$")],
            
            # –ì–æ—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
            READY_VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ready_vacancy)],
            
            # –û–ø–ª–∞—Ç–∞
            CONFIRM_PAYMENT: [CallbackQueryHandler(select_publication_type, pattern="^(regular|vip)$")],
            WAITING_FOR_PAYMENT: [
                CallbackQueryHandler(check_payment, pattern="check_payment"),
                CallbackQueryHandler(back_to_payment, pattern="back_to_payment")
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(publish, pattern="publish"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == '__main__':
    main()
