# bot.py
import os
import logging
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TITLE, DESCRIPTION, CONTACT, CONFIRM_PAYMENT = range(4)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    logger.error("–¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")
    exit(1)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_ID = "752266705"

# –ò–º—è –≤–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
CHANNEL_ID = "@workwave_kzn"

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ (–≤ —Ä—É–±–ª—è—Ö)
PUBLICATION_COST = 300
VIP_COST = 800

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    welcome_text = (
        "üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn\n\n"
        "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        f"–û–±—ã—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {PUBLICATION_COST} ‚ÇΩ\n"
        f"VIP –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {VIP_COST} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"üìå –û–±—ã—á–Ω–∞—è ({PUBLICATION_COST} ‚ÇΩ)", callback_data="regular")],
        [InlineKeyboardButton(f"‚≠ê VIP ({VIP_COST} ‚ÇΩ)", callback_data="vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return TITLE

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def select_publication_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user_data['publication_type'] = query.data
    cost = VIP_COST if query.data == "vip" else PUBLICATION_COST
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {'VIP' if query.data == 'vip' else '–æ–±—ã—á–Ω—É—é'} –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:"
    )
    return TITLE

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
async def get_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user_data['title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    return DESCRIPTION

# –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    user_data['description'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, email, Telegram):")
    return CONTACT

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
    user_data['contact'] = update.message.text
    
    pub_type = "VIP" if user_data.get('publication_type') == "vip" else "–û–±—ã—á–Ω–∞—è"
    cost = VIP_COST if user_data.get('publication_type') == "vip" else PUBLICATION_COST
    
    confirmation_text = (
        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
        f"–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {pub_type}\n"
        f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['title']}\n"
        f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}\n"
        f"üîπ –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏?"
    )

    keyboard = [[InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {cost} ‚ÇΩ", callback_data="pay")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(confirmation_text, reply_markup=reply_markup)
    return CONFIRM_PAYMENT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    cost = VIP_COST if user_data.get('publication_type') == "vip" else PUBLICATION_COST
    
    payment_text = (
        f"üí∞ –û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({cost} ‚ÇΩ)\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n"
        "üîπ –°–ë–ü –ø–æ –Ω–æ–º–µ—Ä—É: `+79872500303`\n"
        "üîπ Tinkoff: `5536914009734478`\n"
        "üîπ Qiwi: `https://qiwi.com/n/PROWEB777`\n\n"
        "‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: `–í–∞–∫–∞–Ω—Å–∏—è`\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\""
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(payment_text, reply_markup=reply_markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º)
async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    pub_type = "VIP" if user_data.get('publication_type') == "vip" else "–û–±—ã—á–Ω–∞—è"
    cost = VIP_COST if user_data.get('publication_type') == "vip" else PUBLICATION_COST

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    moderation_text = (
        f"üìù –ù–û–í–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø (–û–ü–õ–ê–ß–ï–ù–û)\n"
        f"–¢–∏–ø: {pub_type} ({cost} ‚ÇΩ)\n\n"
        f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['title']}\n"
        f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}\n"
        f"üîπ –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}\n\n"
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é?"
    )

    keyboard = [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=ADMIN_ID, 
        text=moderation_text, 
        reply_markup=reply_markup
    )

    await query.edit_message_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        "–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn"
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É
async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    welcome_text = (
        "üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn\n\n"
        "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.\n"
        f"–û–±—ã—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {PUBLICATION_COST} ‚ÇΩ\n"
        f"VIP –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {VIP_COST} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"üìå –û–±—ã—á–Ω–∞—è ({PUBLICATION_COST} ‚ÇΩ)", callback_data="regular")],
        [InlineKeyboardButton(f"‚≠ê VIP ({VIP_COST} ‚ÇΩ)", callback_data="vip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    return TITLE

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–¥–º–∏–Ω–æ–º
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
    query = update.callback_query
    await query.answer()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    pub_type = "‚≠ê VIP –í–ê–ö–ê–ù–°–ò–Ø" if user_data.get('publication_type') == "vip" else "üíº –í–ê–ö–ê–ù–°–ò–Ø"
    
    post_text = (
        f"{pub_type}\n\n"
        f"üîπ {user_data['title']}\n\n"
        f"{user_data['description']}\n\n"
        f"üì© –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}"
    )

    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_message(chat_id=CHANNEL_ID, text=post_text)
        await query.edit_message_text("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ @workwave_kzn!")
        logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {user_data['title']}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"
        await query.edit_message_text(error_msg)
        logger.error(error_msg)

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" –±–æ—Ç–∞
async def ping_self():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_RENDER_APP_URL –Ω–∞ –≤–∞—à URL –∏–∑ Render
    url = "https://workgram-kz.onrender.com"  # <-- –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à URL!
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    logger.info(f"Ping: {resp.status}")
        except Exception as e:
            logger.error(f"Ping error: {e}")
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

def start_ping_loop():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∏–Ω–≥–∞"""
    loop = asyncio.get_event_loop()
    loop.create_task(ping_self())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–∞
    start_ping_loop()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TITLE: [
                CallbackQueryHandler(select_publication_type, pattern="^(regular|vip)$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_title)
            ],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            CONFIRM_PAYMENT: [
                CallbackQueryHandler(pay, pattern="pay"),
                CallbackQueryHandler(back_to_start, pattern="back_to_start")
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(check_payment, pattern="check_payment"))
    app.add_handler(CallbackQueryHandler(publish, pattern="publish"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="back_to_start"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == '__main__':
    main()
